{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos/index.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport ButtonGroup from '../../components/common/GroupButton';\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport { fetchRequest } from '../../store/videos/actions'; // Separate state props + dispatch props to their own interfaces.\n\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\n\nconst VideosIndexPage = props => {\n  const loading = props.loading,\n        fetchData = props.fetchRequest;\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  const renderData = () => {\n    const data = props.data;\n    return React.createElement(DataTable, {\n      columns: ['Video'],\n      widths: ['auto'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, loading && data.length === 0 && React.createElement(VideoLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      colSpan: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Loading...\")), data.result.map(video => React.createElement(\"tr\", {\n      key: video.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, video.link))));\n  };\n\n  const handleButtonClick = event => {\n    const btnIndex = parseInt(event.currentTarget.dataset.index, 10);\n\n    if (btnIndex === 0) {//\n    } else if (btnIndex === 1) {//\n    } else if (btnIndex === 2) {//\n    }\n  };\n\n  return React.createElement(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(ContentHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    onClick: handleButtonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Wha it is\"), React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"How does it feel\"), React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"What to do\"))), React.createElement(TableWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, loading && React.createElement(LoadingOverlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(LoadingOverlayInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"*in last 30 days\")), renderData())));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref) => {\n  let videos = _ref.videos;\n  return {\n    loading: videos.loading,\n    errors: videos.errors,\n    data: videos.data\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VideosIndexPage);\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\nconst VideoDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nconst VideoIcon = styled('img')`\n  width: 32px;\n  height: 32px;\n`;\nconst VideoName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`;\nconst VideoLoading = styled('tr')`\n  td {\n    height: 48px;\n    text-align: center;\n  }\n`;\n\nfunction btnRadius(param) {\n  const groupPosition = param.groupPosition;\n\n  if (groupPosition === 'first') {\n    return '5px 0 0 5px';\n  }\n\n  if (groupPosition === 'last') {\n    return '0 5px 5px 0';\n  }\n\n  return '0';\n}\n\nfunction btnLeftBorder(param) {\n  const groupPosition = param.groupPosition;\n\n  if (groupPosition === 'first') {\n    return '1px';\n  }\n\n  return '0';\n}\n\nconst Button = styled('button')`\n  border-radius: ${btnRadius};\n  border-right-width: 1px;\n  border-left-width: ${btnLeftBorder};\n  padding: 5px 15px;\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos/index.tsx"],"names":["React","connect","ButtonGroup","styled","Page","Container","DataTable","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","API_ENDPOINT","process","env","REACT_APP_API_ENDPOINT","VideosIndexPage","props","loading","fetchData","useEffect","renderData","data","length","result","map","video","id","link","handleButtonClick","event","btnIndex","parseInt","currentTarget","dataset","index","mapStateToProps","videos","errors","mapDispatchToProps","ContentHeader","TableWrapper","theme","widths","md","VideoDetail","VideoIcon","VideoName","colors","brand","VideoLoading","btnRadius","param","groupPosition","btnLeftBorder","Button"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport ButtonGroup from '../../components/common/GroupButton';\n\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../../store';\nimport { VideoResponse } from '../../store/videos/types';\nimport { fetchRequest } from '../../store/videos/actions';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  data: VideoResponse;\n  errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\n\nconst VideosIndexPage: React.FC<AllProps> = (props: AllProps) => {\n  const { loading, fetchRequest: fetchData } = props;\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  const renderData = () => {\n    const { data } = props;\n\n    return (\n      <DataTable columns={['Video']} widths={['auto']}>\n        {loading && data.length === 0 && (\n          <VideoLoading>\n            <td colSpan={3}>Loading...</td>\n          </VideoLoading>\n        )}\n        {data.result.map(video => (\n          <tr key={video.id}>\n            <td>{video.link}</td>\n          </tr>\n        ))}\n      </DataTable>\n    );\n  };\n\n  const handleButtonClick = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    const btnIndex: number = parseInt(event.currentTarget.dataset.index, 10);\n    if (btnIndex === 0) {\n      //\n    } else if (btnIndex === 1) {\n      //\n    } else if (btnIndex === 2) {\n      //\n    }\n  };\n\n  return (\n    <Page>\n      <Container>\n        <ContentHeader>\n          <ButtonGroup onClick={handleButtonClick}>\n            <Button>Wha it is</Button>\n            <Button>How does it feel</Button>\n            <Button>What to do</Button>\n          </ButtonGroup>\n        </ContentHeader>\n        <TableWrapper>\n          {loading && (\n            <LoadingOverlay>\n              <LoadingOverlayInner>\n                <LoadingSpinner />\n              </LoadingOverlayInner>\n            </LoadingOverlay>\n          )}\n          <p>\n            <small>*in last 30 days</small>\n          </p>\n          {renderData()}\n        </TableWrapper>\n      </Container>\n    </Page>\n  );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ videos }: ApplicationState) => ({\n  loading: videos.loading,\n  errors: videos.errors,\n  data: videos.data\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n  fetchRequest\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(VideosIndexPage);\n\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\n\nconst VideoDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst VideoIcon = styled('img')`\n  width: 32px;\n  height: 32px;\n`;\n\nconst VideoName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`;\n\nconst VideoLoading = styled('tr')`\n  td {\n    height: 48px;\n    text-align: center;\n  }\n`;\n\ntype GrouperParam = {\n  groupPosition?: string;\n};\nfunction btnRadius(param: GrouperParam) {\n  const { groupPosition } = param;\n  if (groupPosition === 'first') {\n    return '5px 0 0 5px';\n  }\n  if (groupPosition === 'last') {\n    return '0 5px 5px 0';\n  }\n  return '0';\n}\n\nfunction btnLeftBorder(param: GrouperParam) {\n  const { groupPosition } = param;\n  if (groupPosition === 'first') {\n    return '1px';\n  }\n  return '0';\n}\n\nconst Button = styled('button')`\n  border-radius: ${btnRadius};\n  border-right-width: 1px;\n  border-left-width: ${btnLeftBorder};\n  padding: 5px 15px;\n`;\n"]},"metadata":{},"sourceType":"module"}