{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams/index.tsx\";\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport { fetchRequest } from '../../store/teams/actions'; // Separate state props + dispatch props to their own interfaces.\n\nclass TeamsIndexPage extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fetchTeams = _this$props.fetchTeams;\n\n    if (data.length === 0) {\n      fetchTeams();\n    }\n  }\n\n  renderData() {\n    const data = this.props.data;\n    return React.createElement(DataTable, {\n      columns: ['Rank', 'Team', 'Rating', 'Wins / Losses', 'Last Match'],\n      widths: ['', 'auto', '', '', ''],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, data.slice(0, 20).map((team, i) => {\n      const lastMatch = moment(team.last_match_time * 1000);\n      return React.createElement(\"tr\", {\n        key: team.team_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, i + 1), React.createElement(TeamDetail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(TeamLogo, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, team.logo_url && React.createElement(\"img\", {\n        src: team.logo_url,\n        alt: team.tag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })), React.createElement(TeamName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: `/teams/${team.team_id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, team.name || '(no name)'))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, team.rating.toFixed(0)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, team.wins || 0, \" / \", team.losses || 0), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"time\", {\n        dateTime: lastMatch.toISOString(),\n        title: lastMatch.format('LLLL'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, lastMatch.fromNow())));\n    }));\n  }\n\n  render() {\n    const loading = this.props.loading;\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(TableWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, loading && React.createElement(LoadingOverlay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(LoadingOverlayInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), this.renderData())));\n  }\n\n} // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref) => {\n  let teams = _ref.teams;\n  return {\n    loading: teams.loading,\n    errors: teams.errors,\n    data: teams.data\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchTeams: fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamsIndexPage);\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\nconst TeamDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  min-height: 66px;\n`;\nconst TeamLogo = styled('div')`\n  position: relative;\n  width: 50px;\n  height: 50px;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n`;\nconst TeamName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams/index.tsx"],"names":["React","Link","connect","moment","styled","Page","Container","DataTable","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","TeamsIndexPage","Component","componentDidMount","props","data","fetchTeams","length","renderData","slice","map","team","i","lastMatch","last_match_time","team_id","logo_url","tag","name","rating","toFixed","wins","losses","toISOString","format","fromNow","render","loading","mapStateToProps","teams","errors","mapDispatchToProps","TableWrapper","theme","widths","md","TeamDetail","TeamLogo","TeamName","colors","brand"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../../store';\nimport { Team } from '../../store/teams/types';\nimport { fetchRequest } from '../../store/teams/actions';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  data: Team[];\n  errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n  fetchTeams: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nclass TeamsIndexPage extends React.Component<AllProps> {\n  public componentDidMount() {\n    const { data, fetchTeams } = this.props;\n\n    if (data.length === 0) {\n      fetchTeams();\n    }\n  }\n\n  private renderData() {\n    const { data } = this.props;\n\n    return (\n      <DataTable columns={['Rank', 'Team', 'Rating', 'Wins / Losses', 'Last Match']} widths={['', 'auto', '', '', '']}>\n        {data.slice(0, 20).map((team, i) => {\n          const lastMatch = moment(team.last_match_time * 1000);\n\n          return (\n            <tr key={team.team_id}>\n              <td>{i + 1}</td>\n              <TeamDetail>\n                <TeamLogo>{team.logo_url && <img src={team.logo_url} alt={team.tag} />}</TeamLogo>\n                <TeamName>\n                  <Link to={`/teams/${team.team_id}`}>{team.name || '(no name)'}</Link>\n                </TeamName>\n              </TeamDetail>\n              <td>{team.rating.toFixed(0)}</td>\n              <td>\n                {team.wins || 0} / {team.losses || 0}\n              </td>\n              <td>\n                <time dateTime={lastMatch.toISOString()} title={lastMatch.format('LLLL')}>\n                  {lastMatch.fromNow()}\n                </time>\n              </td>\n            </tr>\n          );\n        })}\n      </DataTable>\n    );\n  }\n\n  public render() {\n    const { loading } = this.props;\n\n    return (\n      <Page>\n        <Container>\n          <TableWrapper>\n            {loading && (\n              <LoadingOverlay>\n                <LoadingOverlayInner>\n                  <LoadingSpinner />\n                </LoadingOverlayInner>\n              </LoadingOverlay>\n            )}\n            {this.renderData()}\n          </TableWrapper>\n        </Container>\n      </Page>\n    );\n  }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ teams }: ApplicationState) => ({\n  loading: teams.loading,\n  errors: teams.errors,\n  data: teams.data\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n  fetchTeams: fetchRequest\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TeamsIndexPage);\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\n\nconst TeamDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  min-height: 66px;\n`;\n\nconst TeamLogo = styled('div')`\n  position: relative;\n  width: 50px;\n  height: 50px;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n`;\n\nconst TeamName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}