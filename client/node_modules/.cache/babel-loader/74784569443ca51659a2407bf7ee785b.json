{"ast":null,"code":"// This file holds our state type, as well as any other types related to this Redux store.\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let PostsActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (PostsActionTypes) {\n  PostsActionTypes[\"FETCH_REQUEST\"] = \"@@posts/FETCH_REQUEST\";\n  PostsActionTypes[\"FETCH_SUCCESS\"] = \"@@posts/FETCH_SUCCESS\";\n  PostsActionTypes[\"FETCH_ERROR\"] = \"@@posts/FETCH_ERROR\";\n  PostsActionTypes[\"SELECT_HERO\"] = \"@@posts/SELECT_HERO\";\n  PostsActionTypes[\"SELECTED\"] = \"@@posts/SELECTED\";\n})(PostsActionTypes || (PostsActionTypes = {}));","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/store/posts/types.ts"],"names":["PostsActionTypes"],"mappings":"AAAA;AAaA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,gBAAZ,C,CAQA;AACA;;WATYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["// This file holds our state type, as well as any other types related to this Redux store.\n\nexport interface Post {\n  id: number;\n  link: string;\n  title: string;\n}\n\nexport interface PostResponse extends ApiResponse {\n  total: number;\n  posts: Post[];\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>;\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum PostsActionTypes {\n  FETCH_REQUEST = '@@posts/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@posts/FETCH_SUCCESS',\n  FETCH_ERROR = '@@posts/FETCH_ERROR',\n  SELECT_HERO = '@@posts/SELECT_HERO',\n  SELECTED = '@@posts/SELECTED'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface PostsState {\n  readonly loading: boolean;\n  readonly data: PostResponse;\n  readonly errors?: string;\n}\n"]},"metadata":{},"sourceType":"module"}