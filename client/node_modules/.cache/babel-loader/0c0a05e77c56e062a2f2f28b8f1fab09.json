{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport TeamsIndexPage from './teams/index';\nimport ShowTeamsPage from './teams/show';\n\nconst TeamsPage = (_ref) => {\n  let match = _ref.match;\n  return React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}/`,\n    component: TeamsIndexPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:id`,\n    component: ShowTeamsPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref2) => {\n  let teams = _ref2.teams;\n  return {\n    loading: teams.loading,\n    errors: teams.errors\n  };\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\n\nexport default connect(mapStateToProps)(TeamsPage);","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams.tsx"],"names":["React","connect","Route","Switch","TeamsIndexPage","ShowTeamsPage","TeamsPage","match","path","mapStateToProps","teams","loading","errors"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,kBAAnD;AAEA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,aAAP,MAA0B,cAA1B;;AAaA,MAAMC,SAA6B,GAAG,UAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACnD,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEA,KAAK,CAACC,IAAK,GAAjC;AAAqC,IAAA,SAAS,EAAEJ,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK,MAA3B;AAAkC,IAAA,SAAS,EAAEH,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMI,eAAe,GAAG;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAkC;AACxDC,IAAAA,OAAO,EAAED,KAAK,CAACC,OADyC;AAExDC,IAAAA,MAAM,EAAEF,KAAK,CAACE;AAF0C,GAAlC;AAAA,CAAxB,C,CAKA;AACA;;;AACA,eAAeX,OAAO,CAACQ,eAAD,CAAP,CAAyBH,SAAzB,CAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, Route, Switch } from 'react-router-dom';\n\nimport TeamsIndexPage from './teams/index';\nimport ShowTeamsPage from './teams/show';\n\nimport { ApplicationState } from '../store';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  errors?: string;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & RouteComponentProps;\n\nconst TeamsPage: React.FC<AllProps> = ({ match }) => {\n  return (\n    <Switch>\n      <Route exact path={`${match.path}/`} component={TeamsIndexPage} />\n      <Route path={`${match.path}/:id`} component={ShowTeamsPage} />\n    </Switch>\n  );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ teams }: ApplicationState) => ({\n  loading: teams.loading,\n  errors: teams.errors\n});\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(mapStateToProps)(TeamsPage);\n"]},"metadata":{},"sourceType":"module"}