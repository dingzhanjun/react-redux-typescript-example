{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/heroes.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport HeroesIndexPage from './heroes/index';\nimport ShowHeroesPage from './heroes/show';\n\nconst HeroesPage = (_ref) => {\n  let match = _ref.match;\n  return React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}/`,\n    component: HeroesIndexPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:name`,\n    component: ShowHeroesPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref2) => {\n  let heroes = _ref2.heroes;\n  return {\n    loading: heroes.loading,\n    errors: heroes.errors,\n    data: heroes.data\n  };\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\n\nexport default connect(mapStateToProps)(HeroesPage);","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/heroes.tsx"],"names":["React","connect","Route","Switch","HeroesIndexPage","ShowHeroesPage","HeroesPage","match","path","mapStateToProps","heroes","loading","errors","data"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,kBAAnD;AAEA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,OAAOC,cAAP,MAA2B,eAA3B;;AAeA,MAAMC,UAA8B,GAAG,UAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACpD,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEA,KAAK,CAACC,IAAK,GAAjC;AAAqC,IAAA,SAAS,EAAEJ,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK,QAA3B;AAAoC,IAAA,SAAS,EAAEH,cAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMI,eAAe,GAAG;AAAA,MAAGC,MAAH,SAAGA,MAAH;AAAA,SAAmC;AACzDC,IAAAA,OAAO,EAAED,MAAM,CAACC,OADyC;AAEzDC,IAAAA,MAAM,EAAEF,MAAM,CAACE,MAF0C;AAGzDC,IAAAA,IAAI,EAAEH,MAAM,CAACG;AAH4C,GAAnC;AAAA,CAAxB,C,CAMA;AACA;;;AACA,eAAeZ,OAAO,CAACQ,eAAD,CAAP,CAAyBH,UAAzB,CAAf","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps, Route, Switch } from 'react-router-dom'\n\nimport HeroesIndexPage from './heroes/index'\nimport ShowHeroesPage from './heroes/show'\n\nimport { ApplicationState } from '../store'\nimport { Hero } from '../store/heroes/types'\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean\n  data: Hero[]\n  errors?: string\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & RouteComponentProps\n\nconst HeroesPage: React.FC<AllProps> = ({ match }) => {\n  return (\n    <Switch>\n      <Route exact path={`${match.path}/`} component={HeroesIndexPage} />\n      <Route path={`${match.path}/:name`} component={ShowHeroesPage} />\n    </Switch>\n  )\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ heroes }: ApplicationState) => ({\n  loading: heroes.loading,\n  errors: heroes.errors,\n  data: heroes.data\n})\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(mapStateToProps)(HeroesPage)\n"]},"metadata":{},"sourceType":"module"}