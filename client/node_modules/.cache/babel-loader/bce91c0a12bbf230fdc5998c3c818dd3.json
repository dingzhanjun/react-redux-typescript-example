{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams/show.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport { selectTeam as selectTeamAction, clearSelected as clearSelectedAction } from '../../store/teams/actions';\nimport DataTable from '../../components/layout/DataTable';\nimport { TeamInfobox, TeamInfoboxBlurBackground, TeamInfoboxInner, TeamLogo, TeamInfoboxHeading, TeamName } from '../../components/teams/TeamInfobox';\nimport { TeamStats, TeamStatsInner, StatItem, StatHeading, StatNumber } from '../../components/teams/TeamStats'; // Separate state props + dispatch props to their own interfaces.\n\nconst formatPlayerIcon = accountId => `https://www.opendota.com/assets/images/dota2/players/${accountId}.png`;\n\nclass ShowTeamsPage extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          selectTeam = _this$props.selectTeam;\n    selectTeam(match.params.id);\n  }\n\n  componentWillUnmount() {\n    const clearSelected = this.props.clearSelected; // clear selected team state before leaving the page\n\n    clearSelected();\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          selected = _this$props2.selected,\n          loading = _this$props2.loading;\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, loading && React.createElement(LoadingOverlay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(LoadingOverlayInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), selected && React.createElement(React.Fragment, null, selected.detail && React.createElement(TeamInfobox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(TeamInfoboxBlurBackground, {\n      src: selected.detail.logo_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(TeamInfoboxInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, selected.detail.logo_url && React.createElement(TeamLogo, {\n      src: selected.detail.logo_url,\n      alt: selected.detail.tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(TeamInfoboxHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TeamName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, selected.detail.name)), React.createElement(TeamStats, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(TeamStatsInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(StatItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(StatHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Wins\"), React.createElement(StatNumber, {\n      attr: \"win\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, selected.detail.wins)), React.createElement(StatItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(StatHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Losses\"), React.createElement(StatNumber, {\n      attr: \"loss\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, selected.detail.losses)), React.createElement(StatItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(StatHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Rating\"), React.createElement(StatNumber, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, selected.detail.rating.toFixed(0))))))), selected.players && React.createElement(TableWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Current players\"), React.createElement(DataTable, {\n      columns: ['Name', 'Games', 'Winrate'],\n      widths: ['auto', '', ''],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, selected.players.filter(player => player.is_current_team_member === true).map(player => React.createElement(\"tr\", {\n      key: player.account_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(PlayerDetail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(PlayerIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: formatPlayerIcon(player.account_id),\n      alt: player.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(PlayerName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, player.name)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, player.games_played), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, player.wins)))))))));\n  }\n\n} // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref) => {\n  let teams = _ref.teams;\n  return {\n    loading: teams.loading,\n    errors: teams.errors,\n    selected: teams.selected\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  selectTeam: selectTeamAction,\n  clearSelected: clearSelectedAction // Now let's connect our component!\n  // With redux v4's improved typings, we can finally omit generics here.\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowTeamsPage);\nconst Wrapper = styled('div')`\n  position: relative;\n`;\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  margin-top: 3rem;\n  min-height: 200px;\n`;\nconst PlayerDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nconst PlayerIcon = styled('div')`\n  position: relative;\n  width: 32px;\n  height: 32px;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n`;\nconst PlayerName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/teams/show.tsx"],"names":["React","connect","styled","Page","Container","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","selectTeam","selectTeamAction","clearSelected","clearSelectedAction","DataTable","TeamInfobox","TeamInfoboxBlurBackground","TeamInfoboxInner","TeamLogo","TeamInfoboxHeading","TeamName","TeamStats","TeamStatsInner","StatItem","StatHeading","StatNumber","formatPlayerIcon","accountId","ShowTeamsPage","Component","componentDidMount","props","match","params","id","componentWillUnmount","render","selected","loading","detail","logo_url","tag","name","wins","losses","rating","toFixed","players","filter","player","is_current_team_member","map","account_id","games_played","mapStateToProps","teams","errors","mapDispatchToProps","Wrapper","TableWrapper","theme","widths","md","PlayerDetail","PlayerIcon","PlayerName","colors","brand"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport styled from '../../utils/styled'\n\nimport Page from '../../components/layout/Page'\nimport Container from '../../components/layout/Container'\nimport LoadingOverlay from '../../components/data/LoadingOverlay'\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner'\nimport LoadingSpinner from '../../components/data/LoadingSpinner'\n\nimport { ApplicationState } from '../../store'\nimport { TeamSelectedPayload } from '../../store/teams/types'\nimport { selectTeam as selectTeamAction, clearSelected as clearSelectedAction } from '../../store/teams/actions'\nimport DataTable from '../../components/layout/DataTable'\nimport {\n  TeamInfobox,\n  TeamInfoboxBlurBackground,\n  TeamInfoboxInner,\n  TeamLogo,\n  TeamInfoboxHeading,\n  TeamName\n} from '../../components/teams/TeamInfobox'\nimport { TeamStats, TeamStatsInner, StatItem, StatHeading, StatNumber } from '../../components/teams/TeamStats'\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean\n  selected?: TeamSelectedPayload\n  errors?: string\n}\n\ninterface PropsFromDispatch {\n  selectTeam: typeof selectTeamAction\n  clearSelected: typeof clearSelectedAction\n}\n\ninterface RouteParams {\n  id: string\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch & RouteComponentProps<RouteParams>\n\nconst formatPlayerIcon = (accountId: number) => `https://www.opendota.com/assets/images/dota2/players/${accountId}.png`\n\nclass ShowTeamsPage extends React.Component<AllProps> {\n  public componentDidMount() {\n    const { match, selectTeam } = this.props\n\n    selectTeam(match.params.id)\n  }\n\n  public componentWillUnmount() {\n    const { clearSelected } = this.props\n\n    // clear selected team state before leaving the page\n    clearSelected()\n  }\n\n  public render() {\n    const { selected, loading } = this.props\n\n    return (\n      <Page>\n        <Container>\n          <Wrapper>\n            {loading && (\n              <LoadingOverlay>\n                <LoadingOverlayInner>\n                  <LoadingSpinner />\n                </LoadingOverlayInner>\n              </LoadingOverlay>\n            )}\n            {selected && (\n              <>\n                {selected.detail && (\n                  <TeamInfobox>\n                    <TeamInfoboxBlurBackground src={selected.detail.logo_url} />\n                    <TeamInfoboxInner>\n                      {selected.detail.logo_url && <TeamLogo src={selected.detail.logo_url} alt={selected.detail.tag} />}\n                      <TeamInfoboxHeading>\n                        <TeamName>{selected.detail.name}</TeamName>\n                      </TeamInfoboxHeading>\n                      <TeamStats>\n                        <TeamStatsInner>\n                          <StatItem>\n                            <StatHeading>Wins</StatHeading>\n                            <StatNumber attr=\"win\">{selected.detail.wins}</StatNumber>\n                          </StatItem>\n                          <StatItem>\n                            <StatHeading>Losses</StatHeading>\n                            <StatNumber attr=\"loss\">{selected.detail.losses}</StatNumber>\n                          </StatItem>\n                          <StatItem>\n                            <StatHeading>Rating</StatHeading>\n                            <StatNumber>{selected.detail.rating.toFixed(0)}</StatNumber>\n                          </StatItem>\n                        </TeamStatsInner>\n                      </TeamStats>\n                    </TeamInfoboxInner>\n                  </TeamInfobox>\n                )}\n                {selected.players && (\n                  <TableWrapper>\n                    <h2>Current players</h2>\n                    <DataTable columns={['Name', 'Games', 'Winrate']} widths={['auto', '', '']}>\n                      {selected.players\n                        .filter(player => player.is_current_team_member === true)\n                        .map(player => (\n                          <tr key={player.account_id}>\n                            <PlayerDetail>\n                              <PlayerIcon>\n                                <img src={formatPlayerIcon(player.account_id)} alt={player.name} />\n                              </PlayerIcon>\n                              <PlayerName>{player.name}</PlayerName>\n                            </PlayerDetail>\n                            <td>{player.games_played}</td>\n                            <td>{player.wins}</td>\n                          </tr>\n                        ))}\n                    </DataTable>\n                  </TableWrapper>\n                )}\n              </>\n            )}\n          </Wrapper>\n        </Container>\n      </Page>\n    )\n  }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ teams }: ApplicationState) => ({\n  loading: teams.loading,\n  errors: teams.errors,\n  selected: teams.selected\n})\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps: PropsFromDispatch = {\n  selectTeam: selectTeamAction,\n  clearSelected: clearSelectedAction\n}\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShowTeamsPage)\n\nconst Wrapper = styled('div')`\n  position: relative;\n`\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  margin-top: 3rem;\n  min-height: 200px;\n`\n\nconst PlayerDetail = styled('td')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nconst PlayerIcon = styled('div')`\n  position: relative;\n  width: 32px;\n  height: 32px;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n`\n\nconst PlayerName = styled('div')`\n  flex: 1 1 auto;\n  height: 100%;\n  margin-left: 1rem;\n\n  a {\n    color: ${props => props.theme.colors.brand};\n  }\n`\n"]},"metadata":{},"sourceType":"module"}