{"ast":null,"code":"import _slicedToArray from \"/Users/jding/BitBucket/react-redux-typescript-example/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport YouTube from 'react-youtube';\nimport Select from 'react-select';\nimport GoTop from '../components/common/GoTop';\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\nimport { fetchRequest } from '../store/videos/actions'; // Separate state props + dispatch props to their own interfaces.\n\nconst VideosIndexPage = props => {\n  const loading = props.loading,\n        fetchData = props.fetchRequest;\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        category = _React$useState2[0],\n        setCategory = _React$useState2[1];\n\n  React.useEffect(() => {\n    setCategory('what_is_it');\n  }, []);\n  React.useEffect(() => {\n    fetchData(JSON.stringify({\n      category\n    }));\n  }, [category]);\n\n  const renderData = () => {\n    const videos = props.videos,\n          total = props.total;\n    return React.createElement(VideoList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, videos && videos.map(video => React.createElement(\"tr\", {\n      key: video.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, video.title), React.createElement(YouTube, {\n      videoId: video.link,\n      opts: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })))));\n  };\n\n  const cats = [{\n    value: 'what_is_it',\n    label: 'What is COVID-19/Coronavirus?'\n  }, {\n    value: 'how_does_it_feel',\n    label: 'How does COVID-19 feel like?'\n  }, {\n    value: 'what_to_do',\n    label: 'What to do to prevent COVID-19?'\n  }, {\n    value: 'by_cdc',\n    label: 'Videos made for you by CDC'\n  }, {\n    value: 'funny_warm',\n    label: 'Cheer Up, look at the bright side!'\n  }];\n  return React.createElement(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(ContentHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(SelectContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Select, {\n    options: cats,\n    isSearchable: false,\n    placeholder: \"Please choose topic your are interested in ...\",\n    onChange: selectedOption => {\n      const _ref = selectedOption,\n            value = _ref.value;\n      setCategory(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), React.createElement(TableWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, loading && React.createElement(LoadingOverlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(LoadingOverlayInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }))), renderData())), React.createElement(GoTop, {\n    scrollStepInPx: 50,\n    delayInMs: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref2) => {\n  let videos = _ref2.videos;\n  return {\n    loading: videos.loading,\n    errors: videos.errors,\n    videos: videos.data.result,\n    total: videos.data.total\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VideosIndexPage);\nconst VideoList = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  align-items: center;\n  h6 {\n    margin-top: 15px;\n  }\n`;\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\nconst SelectContainer = styled('div')`\n  position: relative;\n  @media (min-width: ${props => props.theme.breakpoints.lg}) {\n    max-width: 500px;\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints.xl}) {\n    max-width: 500px;\n  }\n\n  max-width: 100%;\n\n  margin: 0 auto;\n  min-height: 100px;\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos.tsx"],"names":["React","connect","YouTube","Select","GoTop","styled","Page","Container","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","VideosIndexPage","props","loading","fetchData","useState","category","setCategory","useEffect","JSON","stringify","renderData","videos","total","map","video","id","title","link","cats","value","label","selectedOption","mapStateToProps","errors","data","result","mapDispatchToProps","VideoList","ContentHeader","TableWrapper","theme","widths","md","SelectContainer","breakpoints","lg","xl"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport YouTube from 'react-youtube';\nimport Select, { ValueType } from 'react-select';\nimport GoTop from '../components/common/GoTop';\n\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../store';\nimport { Video } from '../store/videos/types';\nimport { fetchRequest } from '../store/videos/actions';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  errors?: string;\n  videos: Video[];\n  total: number;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nconst VideosIndexPage: React.FC<AllProps> = (props: AllProps) => {\n  const { loading, fetchRequest: fetchData } = props;\n  const [category, setCategory] = React.useState('');\n\n  React.useEffect(() => {\n    setCategory('what_is_it');\n  }, []);\n\n  React.useEffect(() => {\n    fetchData(JSON.stringify({ category }));\n  }, [category]);\n\n  const renderData = () => {\n    const { videos, total } = props;\n\n    return (\n      <VideoList>\n        {videos &&\n          videos.map(video => (\n            <tr key={video.id}>\n              <td>\n                <h6>{video.title}</h6>\n                <YouTube videoId={video.link} opts={{}} />\n              </td>\n            </tr>\n          ))}\n      </VideoList>\n    );\n  };\n\n  interface CategoryOption {\n    value: string;\n    label: string;\n  }\n\n  const cats: Array<CategoryOption> = [\n    { value: 'what_is_it', label: 'What is COVID-19/Coronavirus?' },\n    { value: 'how_does_it_feel', label: 'How does COVID-19 feel like?' },\n    { value: 'what_to_do', label: 'What to do to prevent COVID-19?' },\n    { value: 'by_cdc', label: 'Videos made for you by CDC' },\n    { value: 'funny_warm', label: 'Cheer Up, look at the bright side!' }\n  ];\n\n  return (\n    <Page>\n      <Container>\n        <ContentHeader>\n          <SelectContainer>\n            <Select\n              options={cats}\n              isSearchable={false}\n              placeholder=\"Please choose topic your are interested in ...\"\n              onChange={(selectedOption: ValueType<CategoryOption>) => {\n                const { value } = selectedOption as CategoryOption;\n                setCategory(value);\n              }}\n            />\n          </SelectContainer>\n        </ContentHeader>\n        <TableWrapper>\n          {loading && (\n            <LoadingOverlay>\n              <LoadingOverlayInner>\n                <LoadingSpinner />\n              </LoadingOverlayInner>\n            </LoadingOverlay>\n          )}\n          {renderData()}\n        </TableWrapper>\n      </Container>\n      <GoTop scrollStepInPx={50} delayInMs={20} />\n    </Page>\n  );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ videos }: ApplicationState) => ({\n  loading: videos.loading,\n  errors: videos.errors,\n  videos: videos.data.result,\n  total: videos.data.total\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n  fetchRequest\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(VideosIndexPage);\n\nconst VideoList = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  align-items: center;\n  h6 {\n    margin-top: 15px;\n  }\n`;\n\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\n\nconst SelectContainer = styled('div')`\n  position: relative;\n  @media (min-width: ${props => props.theme.breakpoints.lg}) {\n    max-width: 500px;\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints.xl}) {\n    max-width: 500px;\n  }\n\n  max-width: 100%;\n\n  margin: 0 auto;\n  min-height: 100px;\n`;\n"]},"metadata":{},"sourceType":"module"}