{"ast":null,"code":"import _slicedToArray from \"/Users/jding/BitBucket/react-redux-typescript-example/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ButtonGroup, Button } from '../components/common/GroupButton';\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport DataTable from '../components/layout/DataTable';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\nimport { fetchRequest } from '../store/videos/actions'; // Separate state props + dispatch props to their own interfaces.\n\nconst VideosIndexPage = props => {\n  const loading = props.loading,\n        fetchData = props.fetchRequest;\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        category = _React$useState2[0],\n        setCategory = _React$useState2[1];\n\n  React.useEffect(() => {\n    setCategory('what_is_it');\n  }, []);\n  React.useEffect(() => {\n    fetchData(JSON.stringify({\n      category\n    }));\n  }, [category]);\n\n  const renderData = () => {\n    const videos = props.videos,\n          total = props.total;\n    return React.createElement(DataTable, {\n      columns: ['Video'],\n      widths: ['auto'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, loading && videos && videos.length === 0 && React.createElement(VideoLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Loading...\")), videos && videos.map(video => React.createElement(\"tr\", {\n      key: video.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, video.link))));\n  };\n\n  const handleButtonClick = event => {\n    setCategory(event.currentTarget.dataset.category);\n  };\n\n  return React.createElement(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ContentHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    onClick: handleButtonClick,\n    defaultButton: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Button, {\n    \"data-category\": \"what_is_it\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"What is it\"), React.createElement(Button, {\n    \"data-category\": \"how_does_it_feel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"How it feels\"), React.createElement(Button, {\n    \"data-category\": \"what_to_do\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"What to do\"))), React.createElement(TableWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, loading && React.createElement(LoadingOverlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(LoadingOverlayInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), renderData())));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref) => {\n  let videos = _ref.videos;\n  return {\n    loading: videos.loading,\n    errors: videos.errors,\n    videos: videos.data.result,\n    total: videos.data.total\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VideosIndexPage);\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\nconst VideoLoading = styled('tr')`\n  td {\n    height: 48px;\n    text-align: center;\n  }\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/videos.tsx"],"names":["React","connect","ButtonGroup","Button","styled","Page","Container","DataTable","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","VideosIndexPage","props","loading","fetchData","useState","category","setCategory","useEffect","JSON","stringify","renderData","videos","total","length","map","video","id","link","handleButtonClick","event","currentTarget","dataset","mapStateToProps","errors","data","result","mapDispatchToProps","ContentHeader","TableWrapper","theme","widths","md","VideoLoading"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { ButtonGroup, Button } from '../components/common/GroupButton';\n\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport DataTable from '../components/layout/DataTable';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../store';\nimport { Video } from '../store/videos/types';\nimport { fetchRequest } from '../store/videos/actions';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  errors?: string;\n  videos: Video[];\n  total: number;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nconst VideosIndexPage: React.FC<AllProps> = (props: AllProps) => {\n  const { loading, fetchRequest: fetchData } = props;\n  const [category, setCategory] = React.useState('');\n\n  React.useEffect(() => {\n    setCategory('what_is_it');\n  }, []);\n\n  React.useEffect(() => {\n    fetchData(JSON.stringify({ category }));\n  }, [category]);\n\n  const renderData = () => {\n    const { videos, total } = props;\n\n    return (\n      <DataTable columns={['Video']} widths={['auto']}>\n        {loading && videos && videos.length === 0 && (\n          <VideoLoading>\n            <td>Loading...</td>\n          </VideoLoading>\n        )}\n        {videos &&\n          videos.map(video => (\n            <tr key={video.id}>\n              <td>{video.link}</td>\n            </tr>\n          ))}\n      </DataTable>\n    );\n  };\n\n  const handleButtonClick = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    setCategory(event.currentTarget.dataset.category);\n  };\n\n  return (\n    <Page>\n      <Container>\n        <ContentHeader>\n          <ButtonGroup onClick={handleButtonClick} defaultButton={0}>\n            <Button data-category=\"what_is_it\">What is it</Button>\n            <Button data-category=\"how_does_it_feel\">How it feels</Button>\n            <Button data-category=\"what_to_do\">What to do</Button>\n          </ButtonGroup>\n        </ContentHeader>\n        <TableWrapper>\n          {loading && (\n            <LoadingOverlay>\n              <LoadingOverlayInner>\n                <LoadingSpinner />\n              </LoadingOverlayInner>\n            </LoadingOverlay>\n          )}\n          {renderData()}\n        </TableWrapper>\n      </Container>\n    </Page>\n  );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ videos }: ApplicationState) => ({\n  loading: videos.loading,\n  errors: videos.errors,\n  videos: videos.data.result,\n  total: videos.data.total\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n  fetchRequest\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(VideosIndexPage);\n\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\n\nconst VideoLoading = styled('tr')`\n  td {\n    height: 48px;\n    text-align: center;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}