{"ast":null,"code":"var _jsxFileName = \"/Users/jding/BitBucket/react-redux-typescript-example/src/pages/posts.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport GoTop from '../components/common/GoTop';\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\nimport { fetchRequest } from '../store/posts/actions'; // Separate state props + dispatch props to their own interfaces.\n\nconst PostsIndexPage = props => {\n  const loading = props.loading,\n        fetchData = props.fetchRequest;\n  React.useEffect(() => {\n    fetchData('');\n  }, []);\n\n  const renderData = () => {\n    const posts = props.posts;\n    return React.createElement(PostList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, posts && posts.map(post => React.createElement(\"div\", {\n      key: post.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: post.link,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, post.title)))));\n  };\n\n  return React.createElement(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(ContentHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(TableWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, loading && React.createElement(LoadingOverlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(LoadingOverlayInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), renderData())), React.createElement(GoTop, {\n    scrollStepInPx: 50,\n    delayInMs: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = (_ref) => {\n  let posts = _ref.posts;\n  return {\n    loading: posts.loading,\n    errors: posts.errors,\n    posts: posts.data.result,\n    total: posts.data.total\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsIndexPage);\nconst PostList = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  align-items: left;\n  h6 {\n    margin-top: 15px;\n  }\n\n  td {\n    text-align: left;\n  }\n`;\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/pages/posts.tsx"],"names":["React","connect","GoTop","styled","Page","Container","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","PostsIndexPage","props","loading","fetchData","useEffect","renderData","posts","map","post","id","link","title","mapStateToProps","errors","data","result","total","mapDispatchToProps","PostList","ContentHeader","TableWrapper","theme","widths","md"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ButtonGroup, Button } from '../components/common/GroupButton';\nimport GoTop from '../components/common/GoTop';\n\nimport styled from '../utils/styled';\nimport Page from '../components/layout/Page';\nimport Container from '../components/layout/Container';\nimport LoadingOverlay from '../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../store';\nimport { Post } from '../store/posts/types';\nimport { fetchRequest } from '../store/posts/actions';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n  loading: boolean;\n  errors?: string;\n  posts: Post[];\n  total: number;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nconst PostsIndexPage: React.FC<AllProps> = (props: AllProps) => {\n  const { loading, fetchRequest: fetchData } = props;\n\n  React.useEffect(() => {\n    fetchData('');\n  }, []);\n\n  const renderData = () => {\n    const { posts } = props;\n\n    return (\n      <PostList>\n        {posts &&\n          posts.map(post => (\n            <div key={post.id}>\n              <a href={post.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                <h6>{post.title}</h6>\n              </a>\n            </div>\n          ))}\n      </PostList>\n    );\n  };\n\n  return (\n    <Page>\n      <Container>\n        <ContentHeader />\n        <TableWrapper>\n          {loading && (\n            <LoadingOverlay>\n              <LoadingOverlayInner>\n                <LoadingSpinner />\n              </LoadingOverlayInner>\n            </LoadingOverlay>\n          )}\n          {renderData()}\n        </TableWrapper>\n      </Container>\n      <GoTop scrollStepInPx={50} delayInMs={20} />\n    </Page>\n  );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ posts }: ApplicationState) => ({\n  loading: posts.loading,\n  errors: posts.errors,\n  posts: posts.data.result,\n  total: posts.data.total\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n  fetchRequest\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostsIndexPage);\n\nconst PostList = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  align-items: left;\n  h6 {\n    margin-top: 15px;\n  }\n\n  td {\n    text-align: left;\n  }\n`;\n\nconst ContentHeader = styled('div')`\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst TableWrapper = styled('div')`\n  position: relative;\n  max-width: ${props => props.theme.widths.md};\n  margin: 0 auto;\n  min-height: 200px;\n`;\n"]},"metadata":{},"sourceType":"module"}