{"ast":null,"code":"import { useDispatch, useSelector } from 'react-redux';\nimport * as layoutActions from '../store/layout/actions'; // Now here is an example of creating container components.\n//\n// Before React v16 I would've suggested against implementing container components that are\n// separate from their connected view logic, since they intrude at the very definition of a view,\n// but now with newer patterns (e.g. render props), it makes sense to use them once again.\n//\n// See how this works at `./src/components/Header`\n// Redux-specific props.\n\nconst LayoutContainer = (_ref) => {\n  let render = _ref.render,\n      children = _ref.children;\n\n  // We can use Hooks to call in our selector/dispatch functions.\n  const _useSelector = useSelector(state => state.layout),\n        theme = _useSelector.theme;\n\n  const dispatch = useDispatch(); // Create the `setTheme` handler. We use the `dispatch` we got from `useDispatch()` to create said selector.\n\n  const setTheme = color => dispatch(layoutActions.setTheme(color)); // Create a render/children props wrapper with the above variables set as a callback.\n\n\n  if (render) {\n    return render({\n      theme,\n      setTheme\n    });\n  }\n\n  if (children) {\n    return children({\n      theme,\n      setTheme\n    });\n  }\n\n  return null;\n};\n\nexport default LayoutContainer;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/containers/LayoutContainer.tsx"],"names":["useDispatch","useSelector","layoutActions","LayoutContainer","render","children","state","layout","theme","dispatch","setTheme","color"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,OAAO,KAAKC,aAAZ,MAA+B,yBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAYA,MAAMC,eAAqD,GAAG,UAA0B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACtF;AADsF,uBAEpEJ,WAAW,CAAEK,KAAD,IAA6BA,KAAK,CAACC,MAApC,CAFyD;AAAA,QAE9EC,KAF8E,gBAE9EA,KAF8E;;AAGtF,QAAMC,QAAQ,GAAGT,WAAW,EAA5B,CAHsF,CAKtF;;AACA,QAAMU,QAAQ,GAAIC,KAAD,IAAwBF,QAAQ,CAACP,aAAa,CAACQ,QAAd,CAAuBC,KAAvB,CAAD,CAAjD,CANsF,CAQtF;;;AACA,MAAIP,MAAJ,EAAY;AACV,WAAOA,MAAM,CAAC;AAAEI,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAAD,CAAb;AACD;;AAED,MAAIL,QAAJ,EAAc;AACZ,WAAOA,QAAQ,CAAC;AAAEG,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAAD,CAAf;AACD;;AAED,SAAO,IAAP;AACD,CAlBD;;AAoBA,eAAeP,eAAf","sourcesContent":["import * as React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { ApplicationState } from '../store'\nimport { ThemeColors } from '../store/layout'\nimport * as layoutActions from '../store/layout/actions'\n\n// Now here is an example of creating container components.\n//\n// Before React v16 I would've suggested against implementing container components that are\n// separate from their connected view logic, since they intrude at the very definition of a view,\n// but now with newer patterns (e.g. render props), it makes sense to use them once again.\n//\n// See how this works at `./src/components/Header`\n\n// Redux-specific props.\ninterface LayoutContainerProps {\n  theme: ThemeColors\n  setTheme: (theme: ThemeColors) => void\n}\n\n// Wrapper props for render/children callback.\ninterface LayoutContainerRenderProps {\n  render?: (props: LayoutContainerProps) => React.ReactElement\n  children?: (props: LayoutContainerProps) => React.ReactElement\n}\n\nconst LayoutContainer: React.FC<LayoutContainerRenderProps> = ({ render, children }) => {\n  // We can use Hooks to call in our selector/dispatch functions.\n  const { theme } = useSelector((state: ApplicationState) => state.layout)\n  const dispatch = useDispatch()\n\n  // Create the `setTheme` handler. We use the `dispatch` we got from `useDispatch()` to create said selector.\n  const setTheme = (color: ThemeColors) => dispatch(layoutActions.setTheme(color))\n\n  // Create a render/children props wrapper with the above variables set as a callback.\n  if (render) {\n    return render({ theme, setTheme })\n  }\n\n  if (children) {\n    return children({ theme, setTheme })\n  }\n\n  return null\n}\n\nexport default LayoutContainer\n"]},"metadata":{},"sourceType":"module"}