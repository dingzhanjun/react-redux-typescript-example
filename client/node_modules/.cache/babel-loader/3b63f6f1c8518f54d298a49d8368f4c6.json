{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { VideosActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://covid19.recipego.net';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', API_ENDPOINT, '/users');\n\n    if (res.error) {\n      yield put(fetchError(res.error));\n    } else {\n      yield put(fetchSuccess(res));\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack));\n    } else {\n      yield put(fetchError('An unknown error occured.'));\n    }\n  }\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction* watchFetchRequest() {\n  yield takeEvery(VideosActionTypes.FETCH_REQUEST, handleFetch);\n} // We can also use `fork()` here to split our saga into multiple watchers.\n\n\nfunction* heroesSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n\nexport default heroesSaga;","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/store/videos/sagas.ts"],"names":["all","call","fork","put","takeEvery","VideosActionTypes","fetchError","fetchSuccess","callApi","API_ENDPOINT","process","env","REACT_APP_API_ENDPOINT","handleFetch","res","error","err","Error","stack","watchFetchRequest","FETCH_REQUEST","heroesSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,iBAAT,QAAkC,SAAlC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,WAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,IAAsC,8BAA3D;;AAEA,UAAUC,WAAV,GAAwB;AACtB,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMb,IAAI,CAACO,OAAD,EAAU,KAAV,EAAiBC,YAAjB,EAA+B,QAA/B,CAAtB;;AAEA,QAAIK,GAAG,CAACC,KAAR,EAAe;AACb,YAAMZ,GAAG,CAACG,UAAU,CAACQ,GAAG,CAACC,KAAL,CAAX,CAAT;AACD,KAFD,MAEO;AACL,YAAMZ,GAAG,CAACI,YAAY,CAACO,GAAD,CAAb,CAAT;AACD;AACF,GATD,CASE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAG,YAAYC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EAAuC;AACrC,YAAMf,GAAG,CAACG,UAAU,CAACU,GAAG,CAACE,KAAL,CAAX,CAAT;AACD,KAFD,MAEO;AACL,YAAMf,GAAG,CAACG,UAAU,CAAC,2BAAD,CAAX,CAAT;AACD;AACF;AACF,C,CAED;AACA;;;AACA,UAAUa,iBAAV,GAA8B;AAC5B,QAAMf,SAAS,CAACC,iBAAiB,CAACe,aAAnB,EAAkCP,WAAlC,CAAf;AACD,C,CAED;;;AACA,UAAUQ,UAAV,GAAuB;AACrB,QAAMrB,GAAG,CAAC,CAACE,IAAI,CAACiB,iBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeE,UAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { VideosActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://covid19.recipego.net';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', API_ENDPOINT, '/users');\n\n    if (res.error) {\n      yield put(fetchError(res.error));\n    } else {\n      yield put(fetchSuccess(res));\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack));\n    } else {\n      yield put(fetchError('An unknown error occured.'));\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(VideosActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction* heroesSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n\nexport default heroesSaga;\n"]},"metadata":{},"sourceType":"module"}