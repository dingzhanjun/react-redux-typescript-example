{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter } from 'connected-react-router';\nimport { layoutReducer } from './layout';\nimport videosSaga from './videos/sagas';\nimport { videosReducer } from './videos/reducer';\nimport teamsSaga from './teams/sagas';\nimport { teamsReducer } from './teams/reducer';\nimport postsSaga from './posts/sagas';\nimport { postsReducer } from './posts/reducer';\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = history => combineReducers({\n  layout: layoutReducer,\n  videos: videosReducer,\n  posts: postsReducer,\n  teams: teamsReducer,\n  router: connectRouter(history)\n}); // Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n\nexport function* rootSaga() {\n  yield all([fork(videosSaga), fork(postsSaga), fork(teamsSaga)]);\n}","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/store/index.ts"],"names":["combineReducers","all","fork","connectRouter","layoutReducer","videosSaga","videosReducer","teamsSaga","teamsReducer","postsSaga","postsReducer","createRootReducer","history","layout","videos","posts","teams","router","rootSaga"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA2C,wBAA3C;AAGA,SAAsBC,aAAtB,QAA2C,UAA3C;AAEA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAYA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAC/BZ,eAAe,CAAC;AACda,EAAAA,MAAM,EAAET,aADM;AAEdU,EAAAA,MAAM,EAAER,aAFM;AAGdS,EAAAA,KAAK,EAAEL,YAHO;AAIdM,EAAAA,KAAK,EAAER,YAJO;AAKdS,EAAAA,MAAM,EAAEd,aAAa,CAACS,OAAD;AALP,CAAD,CADV,C,CASP;AACA;AACA;;AACA,OAAO,UAAUM,QAAV,GAAqB;AAC1B,QAAMjB,GAAG,CAAC,CAACC,IAAI,CAACG,UAAD,CAAL,EAAmBH,IAAI,CAACO,SAAD,CAAvB,EAAoCP,IAAI,CAACK,SAAD,CAAxC,CAAD,CAAT;AACD","sourcesContent":["import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\n\nimport { LayoutState, layoutReducer } from './layout';\n\nimport videosSaga from './videos/sagas';\nimport { videosReducer } from './videos/reducer';\nimport { VideosState } from './videos/types';\nimport teamsSaga from './teams/sagas';\nimport { TeamsState } from './teams/types';\nimport { teamsReducer } from './teams/reducer';\nimport postsSaga from './posts/sagas';\nimport { postsReducer } from './posts/reducer';\nimport { PostsState } from './posts/types';\n\n// The top-level state object\nexport interface ApplicationState {\n  layout: LayoutState;\n  videos: VideosState;\n  posts: PostsState;\n  teams: TeamsState;\n  router: RouterState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    layout: layoutReducer,\n    videos: videosReducer,\n    posts: postsReducer,\n    teams: teamsReducer,\n    router: connectRouter(history)\n  });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n  yield all([fork(videosSaga), fork(postsSaga), fork(teamsSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}