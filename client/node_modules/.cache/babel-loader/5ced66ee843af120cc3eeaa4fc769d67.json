{"ast":null,"code":"import _defineProperty from \"/Users/jding/BitBucket/react-redux-typescript-example/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HeroesActionTypes } from './types'; // Type-safe initialState!\n\nexport const initialState = {\n  data: [],\n  errors: undefined,\n  loading: false // Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n  // everything will remain type-safe.\n\n};\n\nconst reducer = function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HeroesActionTypes.FETCH_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: true\n        });\n      }\n\n    case HeroesActionTypes.FETCH_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case HeroesActionTypes.FETCH_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          errors: action.payload\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\n\n\nexport { reducer as heroesReducer };","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/store/videos/reducer.ts"],"names":["HeroesActionTypes","initialState","data","errors","undefined","loading","reducer","state","action","type","FETCH_REQUEST","FETCH_SUCCESS","payload","FETCH_ERROR","heroesReducer"],"mappings":";;;;;;AACA,SAAsBA,iBAAtB,QAA+C,SAA/C,C,CAEA;;AACA,OAAO,MAAMC,YAAyB,GAAG;AACvCC,EAAAA,IAAI,EAAE,EADiC;AAEvCC,EAAAA,MAAM,EAAEC,SAF+B;AAGvCC,EAAAA,OAAO,EAAE,KAH8B,CAMzC;AACA;;AAPyC,CAAlC;;AAQP,MAAMC,OAA6B,GAAG,SAAhCA,OAAgC,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACtE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAiB,CAACU,aAAvB;AAAsC;AACpC,iCAAYH,KAAZ;AAAmBF,UAAAA,OAAO,EAAE;AAA5B;AACD;;AACD,SAAKL,iBAAiB,CAACW,aAAvB;AAAsC;AACpC,iCAAYJ,KAAZ;AAAmBF,UAAAA,OAAO,EAAE,KAA5B;AAAmCH,UAAAA,IAAI,EAAEM,MAAM,CAACI;AAAhD;AACD;;AACD,SAAKZ,iBAAiB,CAACa,WAAvB;AAAoC;AAClC,iCAAYN,KAAZ;AAAmBF,UAAAA,OAAO,EAAE,KAA5B;AAAmCF,UAAAA,MAAM,EAAEK,MAAM,CAACI;AAAlD;AACD;;AACD;AAAS;AACP,eAAOL,KAAP;AACD;AAZH;AAcD,CAfD,C,CAiBA;AACA;;;AACA,SAASD,OAAO,IAAIQ,aAApB","sourcesContent":["import { Reducer } from 'redux'\nimport { HeroesState, HeroesActionTypes } from './types'\n\n// Type-safe initialState!\nexport const initialState: HeroesState = {\n  data: [],\n  errors: undefined,\n  loading: false\n}\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<HeroesState> = (state = initialState, action) => {\n  switch (action.type) {\n    case HeroesActionTypes.FETCH_REQUEST: {\n      return { ...state, loading: true }\n    }\n    case HeroesActionTypes.FETCH_SUCCESS: {\n      return { ...state, loading: false, data: action.payload }\n    }\n    case HeroesActionTypes.FETCH_ERROR: {\n      return { ...state, loading: false, errors: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as heroesReducer }\n"]},"metadata":{},"sourceType":"module"}