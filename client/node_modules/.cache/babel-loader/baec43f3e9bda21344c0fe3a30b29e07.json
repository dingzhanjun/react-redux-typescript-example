{"ast":null,"code":"// This file holds our state type, as well as any other types related to this Redux store.\n// Response object for GET /teams\n// https://docs.opendota.com/#tag/teams%2Fpaths%2F~1teams%2Fget\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let TeamsActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (TeamsActionTypes) {\n  TeamsActionTypes[\"FETCH_REQUEST\"] = \"@@teams/FETCH_REQUEST\";\n  TeamsActionTypes[\"FETCH_SUCCESS\"] = \"@@teams/FETCH_SUCCESS\";\n  TeamsActionTypes[\"FETCH_ERROR\"] = \"@@teams/FETCH_ERROR\";\n  TeamsActionTypes[\"SELECT_TEAM\"] = \"@@teams/SELECT_TEAM\";\n  TeamsActionTypes[\"SELECTED\"] = \"@@teams/SELECTED\";\n  TeamsActionTypes[\"CLEAR_SELECTED\"] = \"@@teams/CLEAR_SELECTED\";\n})(TeamsActionTypes || (TeamsActionTypes = {}));","map":{"version":3,"sources":["/Users/jding/BitBucket/react-redux-typescript-example/src/store/teams/types.ts"],"names":["TeamsActionTypes"],"mappings":"AAAA;AAEA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,gBAAZ,C,CASA;AACA;;WAVYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["// This file holds our state type, as well as any other types related to this Redux store.\n\n// Response object for GET /teams\n// https://docs.opendota.com/#tag/teams%2Fpaths%2F~1teams%2Fget\nexport interface Team {\n  team_id: number\n  rating: number\n  wins: number\n  losses: number\n  last_match_time: number\n  name: string\n  tag?: string\n  logo_url?: string\n}\n\nexport interface Player {\n  account_id: number\n  name: string\n  games_played: number\n  wins: number\n  is_current_team_member: boolean\n}\n\nexport interface TeamSelectedPayload {\n  detail: Team\n  players: Player[]\n}\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum TeamsActionTypes {\n  FETCH_REQUEST = '@@teams/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@teams/FETCH_SUCCESS',\n  FETCH_ERROR = '@@teams/FETCH_ERROR',\n  SELECT_TEAM = '@@teams/SELECT_TEAM',\n  SELECTED = '@@teams/SELECTED',\n  CLEAR_SELECTED = '@@teams/CLEAR_SELECTED'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface TeamsState {\n  readonly loading: boolean\n  readonly data: Team[]\n  readonly selected?: TeamSelectedPayload\n  readonly errors?: string\n}\n"]},"metadata":{},"sourceType":"module"}